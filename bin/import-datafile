#!/usr/bin/env python
#
# import-datafile
#

import re
import sys
from copy import copy
from pathlib import Path
from datetime import datetime


from stumpy.utils import walk_matching, iter_tobject, get_tobject
from cppyy.gbl import nullptr

from typing import Optional, Generator


def arg_parser():
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument("files",
                        nargs='+',
                        metavar='data-file',
                        help="Source data root-files")
    parser.add_argument("-o", "--out",
                        nargs='?',
                        default=datetime.now().strftime(r"Data-%Y%m%d.root"),
                        help="Destination file")
    parser.add_argument("--update",
                        action='store_true',
                        help="Open output file in UPDATE mode")
    parser.add_argument("--container-pattern",
                        nargs="?",
                        default='PWG2FEMTO/*',
                        help="")
    parser.add_argument("-n", "--dry-run",
                        action="store_true",
                        help="Do not write output file")
    return parser


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]
    args = arg_parser().parse_args(argv)

    from ROOT import TFile, gSystem

    if args.dry_run:
        from unittest.mock import MagicMock
        output = MagicMock()
    else:
        open_mode = 'UPDATE' if args.update else 'RECREATE'
        output = LazyTFile(args.out, open_mode)

    paths = set(Path(p).absolute() for p in args.files)

    for path in copy(paths):
        if path.is_dir():
            paths.remove(path)
            print("Scanning directory %s for all .root files" % path)
            paths.update(s.absolute() for s in path.glob("**/*.root"))

    for path in paths:
        print(f"\nBeginning scan of {path}")
        process_file(path, output, args.container_pattern)

    return 0


def process_file(path, output, pattern=None):
    from ROOT import TFile
    path = str(path)
    file = TFile.Open(path, "READ")
    if not file:
        return

    for analysis in find_analyses(file, pattern):
        analysis.write_to_file(output)
        pass

    print("Finished processing %s" % file.GetName())


ANALYSIS_FINDERS = []


def register_analysis_class(cls):
    function = cls.FindIn
    ANALYSIS_FINDERS.append(function)
    return cls


def find_analyses(file, pattern):
    from ROOT import AliFemtoConfigObject, std

    if not file:
        return

    magfield = field_from_filename(str(file.GetName()))

    for name, container in walk_matching(file, pattern):
        print('scanning container %r' % name)
        for analysis in iter_tobject(container):
            config = get_tobject(analysis, 'AliFemtoConfigObject')
            if not config:
                continue

            cent_range = AliFemtoConfigObject.RangeValue_t()
            config.find_and_load("event_cut.centrality_range", cent_range)

            cent = '%02d_%02d' % tuple(cent_range)

            charge = config.find("track_cut.charge")
            if not charge:
                print("No charge in track_cut configuration. Skipping")
                continue

            pion_charge = charge.as_int()
            pion_type = ('pim' if pion_charge == -1 else
                         'pip' if pion_charge == 1 else
                         'pi?')

            key = config.Clone()
            key.pop("is_mc")
            key.pop("track_cut.charge")
            key.pop("event_cut.centrality_range")

            hashkey = f'cfg{key.Hash():016X}'

            def get_storage_key(kt_bin):
                kt_dir = '_'.join(('%0.1f' if kt.is_integer() else '%g') % kt
                                  for kt in map(float, kt_bin.split("_")))
                return f'{hashkey}/{pion_type}/{cent}/{kt_dir}/{magfield}'

            # iterator yielding AnalysisResults
            found_results = (data for finder in ANALYSIS_FINDERS
                             for data in finder(analysis))

            for kt_bin, analysis_results in found_results:
                analysis_results.storage_key = get_storage_key(kt_bin)
                analysis_results.config = key
                print(" -> ", analysis_results.storage_key)
                yield analysis_results


class AnalysisResults:

    @classmethod
    def FindIn(cls, obj) -> Generator[Optional['AnalysisResults'], None, None]:
        container = get_tobject(obj, cls.KT_CONTAINER_NAME)
        if container == nullptr:
            return

        for kt_container in iter_tobject(container):
            self = cls.From(kt_container)
            if not self:
                continue
            kt_bin = kt_container.GetName()
            yield kt_bin, self

    def write_config(self, dest):
        cfg_dest = re.match('.*cfg[A-F0-9]+', self.storage_key)
        if cfg_dest:
            config_key = cfg_dest.group() + '/config'
            key = dest.Get(config_key)
            if not key:
                dest.cd(cfg_dest.group())
                self.config.Write("config")

    @property
    def storage_key(self):
        return self._storage_key

    @storage_key.setter
    def storage_key(self, value: str):
        self._storage_key = self.__class__.__name__ + "/" + value

@register_analysis_class
class AnalysisQinv(AnalysisResults):

    KT_CONTAINER_NAME = "KT_Qinv"

    @classmethod
    def From(cls, container) -> Optional['AnalysisFinderQ3D']:

        keys = ("Num_qinv", "Den_qinv", "kTDep_qinv")
        num, den, kt = (get_tobject(container, k) for k in keys)

        if any(x == nullptr for x in (num, den, kt)):
            return
        self = cls(num, den, kt)
        return self

    def __init__(self, num, den, kt=None):
        self.num = num
        self.den = den
        self.kt = kt

    def write_to_file(self, dest):
        dest.mkdir(self.storage_key)
        self.write_config(dest)

        dest.cd(self.storage_key)
        self.num.Write("num")
        self.den.Write("den")
        if self.kt:
            self.kt.Write("kt_dist")


@register_analysis_class
class AnalysisQ3D(AnalysisResults):

    KT_CONTAINER_NAME = "KT_Q3D"

    @classmethod
    def From(cls, container) -> Optional['AnalysisFinderQ3D']:
        """
        """

        keys = ("Num_q3d", "Den_q3d", "NumWqinv_q3d", "DenWqinv_q3d")
        num, den, nqinv, dqinv = map(lambda k: get_tobject(container, k), keys)

        if any(x == nullptr for x in (num, den, nqinv, dqinv)):
            return
        qinv = nqinv.Clone("qinv")
        qinv.SetTitle("q_{inv}")
        if qinv.GetSumw2N() == 0:
            qinv.Sumw2()
        qinv.Add(dqinv)
        sum_ = num.Clone()
        sum_.Add(den)
        qinv.Divide(sum_)
        del sum_

        self = cls(num, den, qinv)
        return self

    def __init__(self, num, den, qinv):
        self.num = num
        self.den = den
        self.qinv = qinv

    def write_to_file(self, dest):
        dest.mkdir(self.storage_key)
        self.write_config(dest)

        dest.cd(self.storage_key)
        self.num.Write("num")
        self.den.Write("den")
        self.qinv.Write("qinv")


@register_analysis_class
class AnalysisTrueQ3D(AnalysisResults):
    """
    Momentum resolution correction for Q3D
    """

    KT_CONTAINER_NAME = "KT_TrueQ3D"

    @classmethod
    def From(cls, obj) -> Optional['AnalysisFinderQ3D']:
        """
        """

        def _load_hists(names):
            hists = [get_tobject(obj, k) for k in names]
            if not all(x for x in hists):
                return None
            return hists

        keyslist = [
            ("Trueq3D_NumRec", "Trueq3D_NumGen",
             "Trueq3D_DenRec", "Trueq3D_DenGen"),
            ("Trueq3DNumRec", "Trueq3DNumGen",
             "Trueq3DDenRec", "Trueq3DDenGen")
        ]

        for keys in keyslist:
            hists = _load_hists(keys)
            if hists:
                break
        else:
            print("Could not find files in", obj)
            return

        nr, ng, dr, dg = hists

        mrc = ng.Clone("mrc")
        mrc.SetStats(False)
        if mrc.GetSumw2N() == 0:
            mrc.Sumw2()

        mrc.SetTitle("Momentum Resolution Correction")
        mrc.Multiply(dr)
        mrc.Divide(dg)
        mrc.Divide(nr)

        self = cls(mrc)
        return self

    def __init__(self, mrc):
        self.mrc = mrc

    def write_to_file(self, dest):
        dest.mkdir(self.storage_key)
        self.write_config(dest)

        dest.cd(self.storage_key)
        self.mrc.Write("mrc")


@register_analysis_class
class DetaDphiSimple(AnalysisResults):

    KT_CONTAINER_NAME = 'KT_DetaDphiSimple'

    @classmethod
    def From(cls, obj) -> Optional['AnalysisFinderQ3D']:
        """
        """
        from itertools import product

        valid = True

        # generate hidden keys
        keys = product(('Primary', 'SecWeak', 'SecMat'), ('', 'Data'))
        keys = (''.join(('Hidden', *k)) for k in keys)

        # loop through all keys
        for suf in ('', 'Hidden', *keys):
            for key in (f'{pre}DPhiDEta{suf}' for pre in ("Num", "Den")):
                hists[key] = get_tobject(obj, key)
                if not hists[keys]:
                    print(f"Missing histogram {key}")
                    valid = False

        if not valid:
            return

        self = cls(**hists)
        return self

    def __init__(self, **hists):
        self.hists = hists
        # for key, val in hists.items():
        #    setattr(self, key, val)

    def write_to_file(self, dest):
        dest.mkdir(self.storage_key)
        self.write_config(dest)

        dest.cd(self.storage_key)
        for name, hist in self.hists.items():
            hist.Write(name)


class LazyTFile:
    """
    File created upon first use (not object construction)
    """

    def __init__(self, filename: str, mode: str):
        self._file = (filename, mode)

    def __getattr__(self, key):
        if isinstance(self._file, tuple):
            from ROOT import TFile
            self._file = TFile.Open(*self._file)
        return getattr(self._file, key)


def field_from_filename(filename: str) -> str:
    lower = filename.casefold()
    if 'neg' in lower:
        return '--'
    elif 'pos' in lower:
        return '++'
    else:
        return '??'


if __name__ == "__main__":
    sys.exit(main())
