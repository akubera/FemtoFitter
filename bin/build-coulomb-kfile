#!/usr/bin/env python3
#
# build-coulomb-kfile
#
"""
Build a histogram and store in output file.

Implementation of equation (36) in the paper
"Coulomb Effects in Femtoscopy"
(http://www.ujk.edu.pl/strony/mrow/papers/PRC-femto.pdf)

"""

import os
import sys
from pathlib import Path
from multiprocessing.pool import Pool

from mpmath import hyp2f2
import numpy as np

HBAR_C = 0.19732697
HBAR_C_SQR = HBAR_C * HBAR_C
ETA = 1.0 / 388


MACRO_SOURCE = """

#include <AliFemtoModelHiddenInfo.h>
#include <AliFemtoPair.h>
#include <TRandom2.h>
#include <TFile.h>
#include <TProfile2D.h>
#include <vector>
#include <AliFemtoModelWeightGeneratorLednicky.h>

void
FillTProfile(int seed, int counts, TProfile2D* result)
{{
  TRandom2 *rng = new TRandom2();
  rng->SetSeed(seed);

  const double
    MinQ = 1e-6,
    MaxQ = result->GetXaxis()->GetXmax(),
    MaxR = result->GetYaxis()->GetXmax();

  auto fill_hidden_info = [&] (AliFemtoParticle &particle,
                               const AliFemtoThreeVector &p,
                               const AliFemtoLorentzVector &r)
    {{
      auto &trk = *particle.Track();
      AliFemtoModelHiddenInfo &info = static_cast<AliFemtoModelHiddenInfo&>(*trk.GetHiddenInfo());

      info.SetTrueMomentum(p);
      info.SetEmissionPoint(r);

      double e = p.MassHypothesis(0.139);
      AliFemtoLorentzVector fourvec(p, e);
      particle.ResetFourMomentum(fourvec);
    }};

  auto fill_pair = [&rng, &MinQ, &MaxQ, &fill_hidden_info] (AliFemtoPair &pair, double Rinv)
    {{
      double qmag = rng->Uniform(MinQ, MaxQ);
      AliFemtoThreeVector q;
      rng->Sphere(q[0], q[1], q[2], qmag);

      AliFemtoThreeVector p1, p2;
      p1[0] = rng->Gaus(0, 1);
      p1[1] = rng->Gaus(0, 1);
      p1[2] = rng->Gaus(0, 1);
      p2 = p1 - q;

      double rt1 = rng->Landau(2.70996e-01, 4.37993e-01);
      double rt2 = rng->Landau(2.70996e-01, 4.37993e-01);

      AliFemtoThreeVector rv1, rv2;
      rv1[0] = rng->Gaus(0, Rinv);
      rv1[1] = rng->Gaus(0, Rinv);
      rv1[2] = rng->Gaus(0, Rinv);

      rv2[0] = rng->Gaus(0, Rinv);
      rv2[1] = rng->Gaus(0, Rinv);
      rv2[2] = rng->Gaus(0, Rinv);

      AliFemtoLorentzVector r1(rv1, rt1),
                            r2(rv2, rt2);

      fill_hidden_info(*pair.Track1(), p1, r1);
      fill_hidden_info(*pair.Track2(), p2, r2);
    }};

  auto create_particle = [] ()
    {{
      auto *info = new AliFemtoModelHiddenInfo();

      info->SetMass(0.139);
      info->SetPDGPid(211);

      auto *t = new AliFemtoTrack();
      t->SetHiddenInfo(info);
      t->SetCharge(1);

      auto *particle = new AliFemtoParticle(t, 0.139);
      return particle;
    }};

  auto *p1 = create_particle(),
       *p2 = create_particle();

  AliFemtoPair pair(p1, p2);

  AliFemtoModelWeightGeneratorLednicky weight_gen;
  weight_gen.SetPairType(AliFemtoModelWeightGenerator::PionPlusPionPlus());
  // weight_gen.SetPairType(1);
  weight_gen.SetQuantumOff();
  weight_gen.SetStrongOn();
  weight_gen.Set3BodyOn();
  weight_gen.SetCoulOn();
  weight_gen.SetSphere();

  auto *info1 = (AliFemtoModelHiddenInfo*)pair.Track1()->Track()->GetHiddenInfo(),
       *info2 = (AliFemtoModelHiddenInfo*)pair.Track2()->Track()->GetHiddenInfo();


  int skipcount = 0;

  for (int i=0; i < counts && (i+skipcount) < 3*counts; ++i) {{

    pair.ClearWeightCache();

    double R = rng->Uniform(2e-4, MaxR);
    fill_pair(pair, R);

    double qinv = pair.QInv();

    if (qinv > MaxQ or R > MaxR) {{
      skipcount += 1;
      --i;
      continue;
    }}

    if (qinv < 1e-9 || R < 1e-9) {{
      std::cout << "ZERO " << qinv << " " << R << "\\n";
      skipcount += 1;
      --i;
      continue;
    }}

    double w = weight_gen.GenerateWeight(&pair);

    if (w > 10) {{
      skipcount += 1;
      auto Rdiff = *info1->GetEmissionPoint() - *info2->GetEmissionPoint();
      double RINV = Rdiff.vect().Mag();

      std::cout << Form("Abnormaly-high w=%0.6f qinv=%0.6f  R=%0.6f", w, qinv, RINV) <<"\\n";
      --i;
      continue;
    }}

    result->Fill(qinv, R, w);
  }}

  if (skipcount) {{
    std::cout << " Had to skip extra " << skipcount << " out-of-bounds pairs "
                 "(extra " << 100.0 * skipcount / counts << "%) \\n";
  }}
}}

#include <cstdlib>

void
Gen(TString filename, TString histname="k2ss")
{{
  TFile tfile(filename, "RECREATE");

  int seed = rand();
  // std::cout << "Seeding with " << seed << "\\n";

  const size_t nxbins = {nxbins},
               nybins = {nybins};

  const double
    xlo = {qlo},
    xhi = {qhi},
    ylo = 0.0,
    yhi = {radius_max};

  std::vector<double> xbins(nxbins), ybins(nybins);

  // log
  const double factor = std::pow(xhi / xlo, 1.0 / (nxbins - 2));
  for (size_t i=0; i<nxbins; ++i) {{
    xbins[i] = (i == 0) ? 0.0 : (i == 1) ? xlo : xbins[i-1] * factor;
  }}

  ybins[nybins-1] = yhi;

  // linear
  for (size_t i=0; i<nybins; ++i) {{
    ybins[i] = ylo + i * (yhi - ylo) / (nybins - 1);
  }}

  auto *result = new TProfile2D(
    histname,
    "Profile of femto-weight versus qinv and Rinv; q_{{inv}} (Gev); R_{{inv}}",
    nxbins-1, xbins.data(),
    nybins-1, ybins.data()
    );

  result->SetStats(false);

  FillTProfile(seed, {count}, result);

  result->Write();
  tfile.Close();
}}
"""


def arg_parser():
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument("--analytic-method",
                        action='store_true',
                        help='Use confluent hypergeometric function')
    parser.add_argument("-o", "--output",
                        default='KFile3.root',
                        help='Output ROOT file')
    parser.add_argument("-Q", "--qinv-max",
                        type=float,
                        default=0.35,
                        help='Maximum q-inv')
    parser.add_argument("--nbins-Q",
                        type=int,
                        default=30,
                        help='Bin count in radius')
    parser.add_argument("-R", "--radius-max",
                        type=float,
                        default=20.5,
                        help='Maximum radius')
    parser.add_argument("--nbins-R",
                        type=int,
                        default=60,
                        help='Bin count in radius')
    parser.add_argument("--hist-name",
                        default='k2ss',
                        help='histogram of ')
    return parser


def run(filename):
    import sh
    sh.aliroot("-x", "-q", "-b", "-l", 'Gen.C+("%s")' % filename)


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]
    args = arg_parser().parse_args(argv)

    nbins_qinv = args.nbins_Q
    nbins_R = args.nbins_R

    max_qinv = args.qinv_max
    max_R = args.radius_max

    orig_dir = Path(os.getcwd())
    print("Output file:", args.output)

    if args.analytic_method:
        build_analytic_kfile(orig_dir / args.output, nbins_qinv, max_qinv, nbins_R, max_R)
    else:
        build_mc_kfile(args.output, nbins_qinv, max_qinv, nbins_R, max_R)


def build_mc_kfile(dest, nbins_qinv, max_qinv, nbins_R, max_R):

    from tempfile import TemporaryDirectory
    import sh

    with TemporaryDirectory() as tmpdir:
        os.chdir(tmpdir)
        with open("Gen.C", "w") as tmp:
            tmp.write(MACRO_SOURCE.format(nxbins=nbins_qinv,
                                          qlo=1e-3,
                                          qhi=max_qinv,
                                          nybins=nbins_R,
                                          radius_max=max_R,
                                          count=2e6))

        # precompile
        sh.aliroot("-q", "-b", "-l", "-e", '.L Gen.C+')

        files = ["f%0d.root" % i for i in range(15)]
        with Pool() as pool:
            pool.map(run, files)

        print("Beginning merge")
        sh.hadd('-f', dest, *files)
        print("Done.")


def build_analytic_kfile(dest, nbins_q, max_q, nbins_R, max_R, *,
                         do_profile=True, vary_bins=True):

    from ROOT import TFile, TH2D, TProfile2D

    if vary_bins:
        qbins = np.logspace(-4, np.log10(max_q), nbins_q + 1)
        rbins = np.linspace(0, max_R, nbins_R + 1)
        bin_info = (nbins_q, qbins, nbins_R, rbins)
    else:
        bin_info = (nbins_q, 0, max_q, nbins_R, 0, max_R)

    HistType = TProfile2D if do_profile else TH2D
    k2ss = HistType("k2ss", "K_{coul}(q_{inv}, R); q_{inv}; R_{inv}", *bin_info)
    k2ss.SetStats(False)

    from functools import partial

    Rvals = np.linspace(0, max_R, nbins_R * 6)
    # qvals = np.logspace(-4, np.log10(max_q), nbins_q * 30)
    qvals = np.concatenate([
      np.linspace(qbins[i], qbins[i+1], 77)[:-1]
      for i in range(nbins_q)])

    with Pool() as pool:
        zz = pool.map(partial(calc_all, qvals), Rvals)

    zz = np.concatenate(zz)
    xx, yy = np.meshgrid(qvals, Rvals)

    for q, r, z in zip(xx.flatten(), yy.flatten(), zz.flatten()):
        k2ss.Fill(q, r, z)

    outfile = TFile.Open(str(dest), "RECREATE")
    k2ss.Write()
    outfile.Close()


def calc_all(qinvs, Rinv):
    """
    Calculate Coulomb factor for multiple qinv values
    """
    z = -4 * (qinvs * (Rinv / HBAR_C)) ** 2
    ziter = map(float, (hyp2f2(0.5, 1, 1.5, 1.5, _z) for _z in z))
    h = np.fromiter(ziter, float)
    k = gamov(qinvs) * (1 + 8 * ETA * Rinv / np.sqrt(np.pi) * h)
    return k


def gamov(qinv):
    """
    Gamov factor
    """
    x = 2.0 * np.pi * HBAR_C * ETA / qinv
    return x / (np.exp(x) - 1)


def calculate(qinv, R):
    """
    Coulomb factor for single (qinv, Rinv) pion pair
    """
    z = -4 * (qinv * R / HBAR_C) ** 2
    h = float(hyp2f2(.5, 1, 1.5, 1.5, z))
    k = gamov(qinv) * (1 + 8 * ETA * R / np.sqrt(np.pi) * h)
    if abs(k) > 2:
        print(qinv, R, z, h)
    return k


if __name__ == "__main__":
    sys.exit(main())
