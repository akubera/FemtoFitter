#!/usr/bin/env python
#
# fit-all
#

import sys
from pathlib import Path


def arg_parser():
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument("input",
                        help="file to fit")
    parser.add_argument("-o", "--output",
                        nargs='?',
                        default=None,
                        help="Output fitresult json file")
    parser.add_argument("--chi2",
                        action='store_true',
                        help="file to fit")
    parser.add_argument("--limit",
                        type=int,
                        default=None,
                        help="limit input count")
    parser.add_argument("--fitrange",
                        type=float,
                        default=0.11,
                        help="symmetric limit to fit")
    parser.add_argument("--mrc-path",
                        nargs='?',
                        default=False,
                        help="file to fit")
    parser.add_argument("--fitter",
                        default='FitterGaussOSL',
                        help="Name of fitter class")
    parser.add_argument("--fsi",
                        default='FsiKFile',
                        help="Name of fsi class")
    parser.add_argument("--fsi-args",
                        default=(),
                        help="Arguments used to build fsi object")
    return parser


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]
    args = arg_parser().parse_args(argv)
    if sys.path[0] != '':
        sys.path.insert(0, '')

    from femtofitter.fit import parallel_fit_all
    import ROOT
    from ROOT import gSystem, TFile

    if gSystem.Load("build/libFemtoFitter.so") < 0:
        print("Could not load libFemtoFitter")
        return 1

    try:
        getattr(ROOT, args.fitter)
    except AttributeError:
        print(f"Could not load fitter class {args.fitter!r}", file=sys.stderr)
        return 1

    tfile = TFile.Open(args.input)
    if not tfile:
        return 1

    input_path = Path(args.input)

    if args.output == '-':
        dest = None
    elif args.output:
        dest = args.output
    else:
        dest_filename = "fitres-%s.json" % input_path.name
        dest_dir = Path("fit-results")
        dest_dir.mkdir(exist_ok=True, parents=True)
        dest = dest_dir / dest_filename
        # todo: Check if dest exists and warn user?

    if args.mrc_path == 'True':
        mrc_path = True
    else:
        mrc_path = args.mrc_path

    try:
        fsi_class = getattr(ROOT, args.fsi)
    except AttributeError as e:
        raise ValueError(f'Could not load FSI class {args.fsi!r}') from e

    fsi_args = args.fsi_args
    if isinstance(args.fsi_args, str):
        # try interpreting as python literal
        import ast
        try:
            fsi_args = ast.literal_eval(args.fsi_args)
        except:
            pass

    if not isinstance(fsi_args, tuple):
        fsi_args = (fsi_args, )

    print(f"Using MRC {mrc_path!r}" if mrc_path else "No Momentum Resolution Correction")
    print(f"Using FSI: {fsi_class.__name__}{fsi_args}")
    print(f"Output will be written to {dest}")

    parallel_fit_all(tfile,
                     (args.fsi, fsi_args),
                     dest,
                     args.fitter,
                     mrc_path,
                     args.fitrange,
                     args.chi2,
                     args.limit)
    return 0


if __name__ == "__main__":
    exit(main())
