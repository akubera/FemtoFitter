#!/usr/bin/env python
#
# fit-all
#

import sys
from pathlib import Path


def arg_parser():
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument("input",
                        help="file to fit")
    parser.add_argument("-o", "--output",
                        nargs='?',
                        default=None,
                        help="Output fitresult json file")
    parser.add_argument("--chi2",
                        action='store_true',
                        help="file to fit")
    parser.add_argument("--skip",
                        type=int,
                        default=None,
                        help="skip first N analyses")
    parser.add_argument("--limit",
                        type=int,
                        default=None,
                        help="limit input count")
    parser.add_argument("--ratio-minimum",
                        type=float,
                        default=0.0,
                        help="Limit correlation function")
    parser.add_argument("--fitrange",
                        type=float,
                        default=0.11,
                        help="symmetric limit to fit")
    parser.add_argument("--subset",
                        type=str,
                        default=None,
                        help="Optional subset selection")
    parser.add_argument("--mrc-only",
                        action='store_true',
                        help='Only run fits with mrc corrections')
    parser.add_argument("--mrc-class",
                        nargs='?',
                        default='MrcRatio3D',
                        help="Classname of MRC object")
    parser.add_argument("--mrc-path",
                        nargs='?',
                        default=False,
                        help="file to fit")
    parser.add_argument("--fitter",
                        default='FitterGaussOSL',
                        help="Name of fitter class")
    parser.add_argument("--fsi",
                        default='FsiKFile',
                        help="Name of fsi class")
    parser.add_argument("--fsi-args",
                        default=(),
                        help="Arguments used to build fsi object")
    parser.add_argument("--threads",
                        default=None,
                        type=int,
                        help="Number of parallel processes to run")
    return parser


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]
    args = arg_parser().parse_args(argv)
    if sys.path[0] != '':
        sys.path.insert(0, '')

    from femtofitter.fit import parallel_fit_all, pfit_all, ParallelFitArgs
    import ROOT
    from ROOT import gSystem, TFile

    if gSystem.Load("build/libFemtoFitter.so") < 0:
        print("Could not load libFemtoFitter")
        return 1

    try:
        getattr(ROOT, args.fitter)
    except AttributeError:
        print(f"Could not load fitter class {args.fitter!r}", file=sys.stderr)
        return 1

    tfile = TFile.Open(args.input)
    if not tfile:
        return 1

    input_path = Path(args.input)

    if args.output == '-':
        dest = None
    elif args.output:
        dest = args.output
    else:
        from datetime import datetime as dt
        dest_filename = "fitres-%s-%s.json" % (dt.now().strftime("%y%m%d%H%M%S"), input_path.stem)
        dest_dir = Path("fit-results")
        dest_dir.mkdir(exist_ok=True, parents=True)
        dest = dest_dir / dest_filename
        # todo: Check if dest exists and warn user?

    args.output = dest

    if args.mrc_path == 'True':
        args.mrc_path = True

    try:
        fsi_class = getattr(ROOT, args.fsi)
    except AttributeError as e:
        raise ValueError(f'Could not load FSI class {args.fsi!r}') from e

    if args.mrc_only and not args.mrc_path:
        print("Warning: No file MRC file specified", file=sys.stderr)
        return 0

    fit_args = ParallelFitArgs.FromCli(tfile, args)
    pfit_all(fit_args)

    print(f"Output written to {args.output}")
    return 0


if __name__ == "__main__":
    exit(main())
